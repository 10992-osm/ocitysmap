OCitySMap installation instructions
===================================

These instructions refer to software dependencies by using Ubuntu
Wily (15.10) package names. Minor adaptations might be needed for
other distributions or for the precise Debian or Ubuntu release you
are using.

 1. Installation of required packages

    sudo apt-get install --quiet --assume-yes \
      git subversion unzip postgresql postgresql-contrib postgis osm2pgsql \
      python-psycopg2 python-feedparser python-imaging gettext imagemagick \
      python-cairo python-cairo-dev python-shapely python-gtk2 \
      python-gdal python-rsvg python-pip python-yaml \
      ttf-unifont ttf-dejavu fonts-droid ttf-unifont fonts-sipa-arundina fonts-sil-padauk \
      fonts-khmeros ttf-indic-fonts-core fonts-taml-tscu ttf-kannada-fonts \
      npm gdal-bin node-carto
 
 2. Creation of a new System and PostgreSQL user

    sudo useradd -m maposmatic
    sudo --user=postgres createuser --superuser --no-createdb --no-createrole maposmatic

 3. Creation of the database

    sudo -u postgres createdb -E UTF8 -O maposmatic gis

    (see http://wiki.openstreetmap.org/wiki/Mapnik/PostGIS)

    You can now try to connect to the database, using:

    sudo --user=maposmatic psql -h localhost gis

    If it doesn't work, fix your configuration.

 4. Enable PostGIS on the database

    PostGIS is in fact a set of functions and data types for
    PostgreSQL, and every PostgreSQL database needing these features
    must be initialized as follows. We do this initialization of the
    database with superuser privileges, and then later fix the table
    owners so that our normal user can use the database.

    a. Install PostGIS support in Postgres

    sudo --user=maposmatic psql --dbname=gis --command="CREATE EXTENSION postgis"
    sudo --user=maposmatic psql --dbname=postgres --command="ALTER USER maposmatic WITH PASSWORD 'secret';"

    b. Change the owner of the new tables to maposmatic

    sudo --user=maposmatic psql --dbname=gis --command="ALTER TABLE geometry_columns OWNER TO maposmatic"
    sudo --user=maposmatic psql --dbname=gis --command="ALTER TABLE spatial_ref_sys OWNER TO maposmatic"

    c. Add hstore extension support

    sudo --user=maposmatic psql --dbname=gis --command="CREATE EXTENSION hstore"


 5. Download the OSM data

    We give the example for Luxembourg.

    wget http://download.geofabrik.de/osm/europe/luxembourg.osm.bz2

 6. Import the OSM data

    sudo --user=maposmatic osm2pgsql --slim --cache=1000 --merc --hstore \
                            --database=gis --user=maposmatic --host=localhost \
                            --create luxembourg.osm.bz2

    If you have a *lot* of RAM, remove '--slim', it will make the import
    faster. If you can at least spare more than 1MB of RAM you can adjust
    the '--cache' to more than 1000. (See also osm2pgsql -h).

    If you want to add other OSM DB files, replace the '--create' option
    with a '--append' option in the subsequent files you are adding: if you
    keep the '--create' option, it will erase any previous GIS data you may
    have. For example:

    sudo --user=maposmatic osm2pgsql --slim --cache=1000 --merc --hstore \
                            --database=gis --user=maposmatic --host=localhost \
                            -- append ile-de-france.osm.bz2


 7. Install Mapnik

    We need Mapnik 2.3.x, which is not yet available in stable
    Debian/Ubuntu, so we need to compile it from source.

    Mapnik 2.3.x is still in beta at the time of this writing,
    but there is a bug in the cairo backend of version 2.2.x
    that Ocitysmap runs into. The bug is fixed in 2.3.x and
    3.0.x. Mapnix 3.0 may look like a better choice as it is
    a stable release, but as the python binding API changed
    in that release it is not an option here.

    a. Install the dependencies

    # Base dependencies
    apt-get build-dep --quiet --assume-yes python-mapnik

    b. Download the latest Mapnik from its Git repository

    git clone git://github.com/mapnik/mapnik.git
    cd mapnik
    git checkout 2.3.x

    c. Compile and install Mapnik

    python scons/scons.py configure 

    (You can also path PREFIX=... and PYTHON_PREFIX=.... if you don't
    want a system-wide installation)

    python scons/scons.py

    python scons/scons.py install

    d. Check the installation

    Run a Python interpreter, and run "import mapnik". If it doesn't
    work and you didn't do a system-wide installation of Mapnik, don't
    forget to set the PYTHONPATH and LD_LIBRARY_PATH environment
    variables.

 8. Installation of CartoOSM - the OpenStreetMap.org default style 

    Mapnik-OSM is the set of files that tell Mapnik how to render
    OpenStreetMap maps.

    a. Download

    git clone https://github.com/gravitystorm/openstreetmap-carto.git

    b. Installation of static data

    In addition to the OpenStreetMap data, some other static data are
    used to render the maps (world boundaries, etc.)

    cd openstreetmap-carto
    ./get-shapefiles.sh

    c. Convert CardoDB project into Mapnik XML stylesheet

    carto project.mml > osm.xml

 9. Installation of OCitySMap

    a. Grab the sources

    (If you are reading this you probably already have ...?)

    git clone https://github.com/hholzgra/ocitysmap.git

    b. Configuration file

    Create a ~/.ocitysmap.conf configuration file, modeled after the
    provided ocitysmap.conf.dist file.

10. Run OCitySMap

    ./render.py -t "Ceci n'est pas Paris" --osmid=-411354  # Contern, LU
    ./render.py -t "Ceci n'est pas Paris" --osmid=-943886  # Chevreuse, FR


Appendix A:  Installation of maposmatic-printable stylesheet
------------------------------------------------------------

    This step builds on step 9 "Installation of OCitySMap".

    a. This style requires some data (symbils, coastlines ...) from
       the old OSM Mapnik stylesheet, so we need to download and
       configure this first

       svn co -q http://svn.openstreetmap.org/applications/rendering/mapnik mapnik2-osm
       cd mapnik2-osm
       sh ./get-coastlines.sh
       cd world_boundaries/
       ln -s ne_110m_admin_0_boundary_lines_land.shp 110m_admin_0_boundary_lines_land.shp
       ln -s ne_110m_admin_0_boundary_lines_land.dbf 110m_admin_0_boundary_lines_land.dbf

    b. Copy ocitysmap/stylesheet/maposmatic-printable/symbols/*
       (i.e. all files in the symbols/ directory) into the
       mapnik2-osm/symbols/ directory.

    c. Add absolute path to file stylesheet/maposmatic-printable/osm.xml
       into ~/.ocitysmap.conf.

    d. Configure the stylesheet with database parameters and relevant
       directories:

       cd ocitysmap/stylesheet/maposmatic-printable/

       python ./generate_xml.py --dbname maposmatic --host 'localhost' \
         --user maposmatic --port 5432 \
         --password 'secret' \
         --world_boundaries path/to/mapnik2-osm/world_boundaries \
         --symbols path/to/mapnik2-osm/symbols

Appendix B: installation of the MapQuest stylesheet
-------------------------------------------------

The above instructions, at step 8, describe how to set up ocitysmap
with the default CartoOSM stylesheet for OpenStreetMap. It is possible
to install other stylesheets, such as the stylesheets made available
by MapQuest. The instructions below detail how to install those
additional stylesheets, making the assumption that ocitysmap is
properly configured and running with the default OSM stylesheet.

First, grab the MapQuest stylesheets:

 git clone git://github.com/MapQuest/MapQuest-Mapnik-Style.git

Go into the MapQuest-Mapnik-Style directory, in which we will do all
the configuration.

First, those stylesheets require the same "world boundaries"
information as the original Mapnik OSM stylesheet (see Appendix A, step a.),
so we are going to share these informations by creating a symbolic link:

 ln -s /path/to/mapnik2-osm/stylesheet/world_boundaries world_boundaries

In addition to those world boundaries, the MapQuest stylesheets need a
few other files. Download the corresponding tarball:


 wget http://aweble.de/downloads/mercator_tiffs.tar.bz2

 (TODO: the files were originally available directly from MapQuest,
        but the original URL no longer works. See also:
        https://github.com/MapQuest/MapQuest-Mapnik-Style/issues/23 )

Unpack this archive, and put the four mq_world_mercator_*.tiff files
directory into the world_boundaries/ directory (this directory is
shared with the original OSM stylesheet, but this is not a problem as
the mq_world_mercator_*.tiff files are not used by the original OSM
stylesheet).

Now, to the configuration of the stylesheet itself (use the
.inc.template files):

 vi mapquest_inc/fontset-settings.xml.inc.template

Not much to change here, the default value is fine. If you want to use
the same font for the original OSM stylesheet and the MapQuest one,
replace "Arial" by "DejaVu".

Create the .inc files from the templates:

 python /path/to/mapnik2-osm/generate_xml.py
    --inc mapquest_inc \
   --symbols mapquest_symbols \
   --dbname 'gis' \
   --host 'localhost' \
   --user maposmatic \
   --port 5432 \
   --password 'secret'

The final step is to integrate this new stylesheet in ocitysmap. To do
so, edit your ~/.ocitysmap.conf file, and add a new stylesheet
section, like:

 [mapquest_eu]
 name: MapQuestEu
 description: MapQuest Europe stylesheet
 path: /path/to/MapQuest-Mapnik-Style/mapquest-eu.xml

Don't forget to add "mapquest_eu" to the available_stylesheets
variable, which lists all available stylesheets.

You can then use it in render.py with the -s option:

  ./render.py -s MapQuestEu ...

Note that in addition to the MapQuest Europe stylesheet
(mapquest-eu.xml), the Git repository also contains the MapQuest US
and MapQuest UK stylesheets (mapquest-us.xml and mapquest-uk.xml),
that you can similarly add to your ocitysmap.conf file.

### TODO: this part is untested with the current setup
          and may be outdated ...

Appendix C: installation of the Stamen Toner stylesheet
-------------------------------------------------------

Toner is a black and white stylesheet initialy provided by Stamen
(http://maps.stamen.com/#toner). The instructions below detail how to install
this stylesheets, making the assumption that ocitysmap is properly configured
and running with the default OSM stylesheet.

 1. Cascadenik installation

Cascadenik implements cascading stylesheets for Mapnik. Cascadenik is a
requisite for Toner stylesheet.

    # install dependancies
    sudo aptitude install python-cssutils python-imaging
    # clone the repository
    git clone https://github.com/mapnik/Cascadenik.git
    cd Cascadenik/
    git checkout mapnik2 # switch to mapnik2 branch

When tested (rev. 7dc2587) Cascadenik mapnik2 branch was not fully functionnal
(at least with mapnik 2.1). If no correction has been made since a patch is
provided to fix that:

    git checkout 7dc2587
    git am --signoff < /path/to/ocitysmap/stylesheet/toner/0001-Fixes-output.py-to-make-it-compatible-with-mapnik-2..patch

Then you can install it:

    python setup.py install

 2. Coastline table

Toner stylesheet reads the coastline datas in the postgis database. We need to
import it in our database.

    cd path/to/mapnik-osm/world_boundaries
    shp2pgsql -s 900913 -I  processed_p.shp coastline \
        | psql -U maposmatic -d maposmatic -h localhost

 3. Natural Earth Data database

Toner stylesheet uses many data from the natural earth database
(http://www.naturalearthdata.com/). We are going to import all theses datas
inside another postgis database.

    mkdir naturalearth
    cd naturalearth
    wget http://kelso.it/x/nevector # download all Natural Earth Data shape
                          # files cf. http://www.naturalearthdata.com/downloads/
    unzip nevector
    sudo su postgres
    # create db
    createdb  -E UTF-8 -O maposmatic naturalearth
    # add geographic extensions
    psql -f /usr/share/postgresql/9.1/contrib/postgis-1.5/postgis.sql \
                                                        -d naturalearth
    psql -f /usr/share/postgresql/9.1/contrib/postgis_comments.sql \
                                                        -d naturalearth
    psql -f /usr/share/postgresql/9.1/contrib/postgis-1.5/spatial_ref_sys.sql \
                                                        -d naturalearth
    # fix permissions
    echo "ALTER TABLE geometry_columns OWNER TO maposmatic;
       ALTER TABLE spatial_ref_sys OWNER TO maposmatic;" | psql -d naturalearth

    # import data from shapefiles
    for FILE in `find . -name *.shp`; do \
             BASE=`basename $FILE .shp`; \
                shp2pgsql -W LATIN1 -s 900913 -I $FILE $BASE \
                                        | psql naturalearth; done

    # fix permissions
    for FILE in `find . -name *.shp`; do   BASE=`basename $FILE .shp`; \
        echo "ALTER TABLE "$BASE" OWNER TO maposmatic;" \
                                        | psql -d naturalearth ; done

 4. Install Toner

    git clone https://github.com/Citytracking/toner.git

The installation has been tested with the commit 58369be

    git checkout 58369be

 4.1 Install toner specific datas

Toner stylesheet is provided with some labels and some roads. We are
importing them in the naturalearth database.

    cd /path/to/toner/
    # fixes manualy set database parameters with ours
    sed  -i 's/psql -d toner -U osm/psql -h localhost -d naturalearth -U maposmatic/' \
                                                         import_toner_v2_shps.sh
    # if you don't want to type too many times the database pass
    vim ~/.pgpass

    localhost::naturalearth:maposmatic:maposmatic_password

    chmod 0600 ~/.pgpass
    # import
    sh import_toner_v2_shps.sh

 4.2 Specific planet views

A specific view is used for motorway in the OSM database.

    cd /path/to/toner/osm
    psql -h localhost -U maposmatic maposmatic < motorways.pgsql

Other views are necessary.

    cd /path/to/toner/mapnik/
    psql -h localhost -U maposmatic maposmatic < views.pgsql

 4.3 Stylesheet generation

    cd /path/to/toner/mapnik/
    cp /path/to/ocitysmap/stylesheet/toner/style-toner-ocitysmap.mml .
    cp /path/to/ocitysmap/stylesheet/toner/labels-ocitysmap.mss .

    # configure database access: change host, name, user and password
    # for each database listed at top of the file
    vim style-toner-ocitysmap.mml

    # generate the stylesheet
    /path/to/cascadenik/cascadenik-compile.py style-toner-ocitysmap.mml \
                                       /tmp/style-toner-ocitysmap.xml
    mv /tmp/style-toner-ocitysmap.xml /path/to/ocitysmap/stylesheet/toner/

 5. ocitysmap configuration

Edit properly the configuration file.

    vim /home/$USER/.ocitysmap.conf

    [Toner]
    name: Toner
    description: Stamen Toner stylesheet
    path: /path/to/ocitysmap/stylesheet/toner/style-toner-ocitysmap.xml

Don't forget to add "Toner" to the available_stylesheets variable, which lists
all available stylesheets.

#!/usr/bin/python
# coding: utf-8

import time, os , sys, select, signal
from datetime import datetime

from www.maposmatic.models import MapRenderingJob
from www.settings import RENDERING_RESULT_PATH
import ocitysmap

def handler(signum, frame, pipe_write):
    f = os.fdopen(pipe_write, 'w')
    f.write("end")

def render_job_process(job):
    bbox = ocitysmap.coords.BoundingBox(job.lat_upper_left,
                                        job.lon_upper_left,
                                        job.lat_bottom_right,
                                        job.lon_bottom_right)

    renderer = ocitysmap.OCitySMap("Plop", bbox)

    outfile_prefix = os.path.join(RENDERING_RESULT_PATH, job.files_prefix())

    _map = renderer.render_into_files(job.maptitle, outfile_prefix,
                                      ["png"], "zoom:16")

    renderer.render_index(job.maptitle, outfile_prefix,
                          ["png"], _map.width, _map.height)

    sys.exit(0)

def render_job(job):
    print 'Rendering "%s"...' % job.maptitle
    job.status = 1
    job.startofrendering_time = datetime.today().strftime("%Y-%m-%d %H:%M")
    job.save()
    (pipe_read, pipe_write) = os.pipe()
    signal.signal(signal.SIGCHLD,
                  lambda signal, frame: handler(signal, frame, pipe_write))
    pid = os.fork()
    if pid == 0:
        # Son
        render_job_process(job)
    else:
        # Father
        try:
            (rlist, wlist, xlist) = select.select([pipe_read], [], [], 20*60)
            if rlist == [] and wlist == [] and xlist == []:
                os.kill(pid, signal.SIGTERM)
                time.sleep(2)
                os.kill(pid, signal.SIGKILL)
                job.resultmsg = "rendering took too long, killed"
                job.status = 2
                job.save()
                return
        finally:
            print "end of process %d" % pid
            (pid, status) = os.waitpid(pid, os.WNOHANG)
            if os.WIFEXITED(status):
                error_code = os.WEXITSTATUS(status)
                if error_code == 0:
                    job.resultmsg = "ok"
                else:
                    job.resultmsg = "rendering failed with %d" % error_code
            elif os.WIFSIGNALED(status):
                job.resultmsg = "rendering killed by signal %d" % os.WTERMSIG(status)
            job.status = 2
            job.save()
            return

# hakipu (c) d.sespere
j = MapRenderingJob()
j.maptitle = "Carte de test"
j.lat_upper_left = 44.4883
j.lon_upper_left = -1.0901
j.lat_bottom_right = 44.4778
j.lon_bottom_right = -1.0637
j.status = 0
j.submitterip = "0.0.0.0"
j.index_queue_at_submission = 42
j.save()

if not os.path.isdir(RENDERING_RESULT_PATH):
    print "ERROR: please set RENDERING_RESULT_PATH ('%s') to an existing directory" % \
        RENDERING_RESULT_PATH
    sys.exit(1)

while True:
    jobs = MapRenderingJob.objects.to_render()
    if not jobs:
        time.sleep(10)
    else:
        for job in jobs:
            render_job(job)
